class PhoenixError extends Error {
  constructor(className, methodName, msg) {
    super(`${className}:${methodName} ${msg}`);
    Error.captureStackTrace(this, this.constructor);
  }
}

module.exports = ( () => { return ( () => {

  global.MissingArgError = class extends PhoenixError {
    /**
      * Throw on missing argument
      * @class MissingArgError
      * @param className {String} Name of the class in which the error is thrown
      * @param methodName {String} Name of the method in which the error is thrown
      * @param msg {String} Error message to display
      */
    constructor(className, methodName, msg) {
      super(className, methodName, msg);
      this.code = 'ERR_MISSING_ARGS';
      this.name = 'MissingArgError';
   }
  };
  global.ArgTypeError = class extends PhoenixError {
    /**
    * Throw on invalid argument type
    * @class ArgTypeError
    * @param className {String} Name of the class in which the error is thrown
    * @param methodName {String} Name of the method in which the error is thrown
    * @param msg {String} Error message to display
    */
    constructor(className, methodName, msg) {
      super(className, methodName, msg);
      this.code = 'ERR_INVALID_ARG_TYPE';
      this.name = 'ArgTypeError';
    }
  };
  global.WellFormedError = class extends PhoenixError {
    /**
    * Throw on invalid instance state
    * @class WellFormedError
    * @param className {String} Name of the class in which the error is thrown
    * @param methodName {String} Name of the method in which the error is thrown
    * @param msg {String} Error message to display
    */
    constructor(className, methodName, msg) {
      super(className, methodName, `Invalid Instance State ${msg}`);
      this.code = 'ERR_INVALID_THIS';
      this.name = 'WellFormedError';
    }
  };
  global.ArgValueError = class extends PhoenixError {
    /**
    * Throw on invalid argument value
    * @class ArgValueError
    * @param className {String} Name of the class in which the error is thrown
    * @param methodName {String} Name of the method in which the error is thrown
    * @param arg {volatile} Variable that was assigned an invalid value
    * @param msg {String} Error message to display
    */
    constructor(className, methodName, arg, msg) {
      super(className, methodName, `${arg} failed validation: ${msg}`);
      this.code = 'ERR_INVALID_ARG_VALUE';
      this.name = 'ArgValueError';
    }
  };
  global.CallbackError = class extends PhoenixError {
    /**
    * Throw on invalid callback
    * @class CallbackError
    * @param className {String} Name of the class in which the error is thrown
    * @param methodName {String} Name of the method in which the error is thrown
    * @param msg {String} Error message to display
    */
    constructor(className, methodName, msg) {
      super(className, methodName, msg);
      this.code = 'ERR_INVALID_CALLBACK';
      this.name = 'CallbackError';
    }
  };
  global.IPValueError = class extends PhoenixError {
    /**
    * Throw on invalid IP value
    * @class IPValueError
    * @param className {String} Name of the class in which the error is thrown
    * @param methodName {String} Name of the method in which the error is thrown
    * @param msg {String} Error message to display
    */
    constructor(className, methodName, msg) {
      super(className, methodName, msg);
      this.code = 'ERR_INVALID_IP_ADDRESS';
      this.name = 'IPValueError';
    }
  };
  global.AbstractError = class extends PhoenixError {
    /**
    * Throw on unimplemented abstract method
    * @class AbstractError
    * @param className {String} Name of the class in which the error is thrown
    * @param methodName {String} Name of the method in which the error is thrown
    */
    constructor(className, methodName) {
      super(className, methodName, 'Abstract method not implemented');
      this.code = 'ERR_METHOD_NOT_IMPLEMENTED';
      this.name = 'AbstractError';
    }
  };
  global.StateError = class extends PhoenixError {
    /**
    * Throw on invalid state
    * @class StateError
    * @param className {String} Name of the class in which the error is thrown
    * @param methodName {String} Name of the method in which the error is thrown
    */
    constructor(className, methodName, what) {
      super(className, methodName, `Invalid state: `);
      this.code = 'ERR_INVALD_THIS';
      this.name = 'StateError';
    }
  };
  global.DeviceStateError = class extends PhoenixError {
    /**
    * Throw on invalid device state
    * @class DeviceStateError
    * @param className {String} Name of the class in which the error is thrown
    * @param methodName {String} Name of the method in which the error is thrown
    * @param dev {String} Name of device in which the error is thrown
    */
    constructor(className, methodName, dev) {
      super(className, methodName, `Invalid state of device: ${dev}`);
      this.code = 'ERR_MISSING_MODULE';
      this.name = 'DeviceStateError';
    }
  };
  global.SystemError = class extends PhoenixError {
    /**
    * Throw on external system error
    * @class SystemError
    * @param className {String} Name of the class in which the error is thrown
    * @param methodName {String} Name of the method in which the error is thrown
    * @param msg {String} Error message to display
    */
    constructor(className, methodName, msg) {
      super(className, methodName, `External System Error: ${msg}`);
      this.code = 'ERR_SYSTEM';
      this.name = 'SystemError';
    }
  };
  global.ConnectionError = class extends PhoenixError {
    /**
    * Throw on external system error
    * @class SystemError
    * @param className {String} Name of the class in which the error is thrown
    * @param methodName {String} Name of the method in which the error is thrown
    * @param msg {String} Error message to display
    */
    constructor(className, methodName, what) {
      super(className, methodName, `Error connecting to ${what}`);
      this.code = 'ERR_CONNECTION';
      this.name = 'ConnectionError';
    }
  };
})() })();
